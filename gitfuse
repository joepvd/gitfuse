#!/usr/bin/env python

import concurrent.futures
from errno import ENOENT
from pathlib import Path
import os
import stat
from time import time
import yaml

from fuse import FUSE, FuseOSError, Operations, LoggingMixIn
import pygit2

CONFIG = '''
mounts:
- repo: /home/jdelft/src/github.com/openshift/ocp-build-data
  branch: origin/openshift-3.11
  mountpoint: /home/jdelft/ocp-ro/3.11
- repo: /home/jdelft/src/github.com/openshift/ocp-build-data
  branch: origin/openshift-4.2
  mountpoint: /home/jdelft/ocp-ro/4.2
- repo: /home/jdelft/src/github.com/openshift/ocp-build-data
  branch: origin/openshift-4.3
  mountpoint: /home/jdelft/ocp-ro/4.3
- repo: /home/jdelft/src/github.com/openshift/ocp-build-data
  branch: origin/openshift-4.4
  mountpoint: /home/jdelft/ocp-ro/4.4
- repo: /home/jdelft/src/github.com/openshift/ocp-build-data
  branch: origin/openshift-4.5
  mountpoint: /home/jdelft/ocp-ro/4.5
- repo: /home/jdelft/src/github.com/openshift/ocp-build-data
  branch: origin/openshift-4.6
  mountpoint: /home/jdelft/ocp-ro/4.6
- repo: /home/jdelft/src/github.com/openshift/ocp-build-data
  branch: origin/openshift-4.7
  mountpoint: /home/jdelft/ocp-ro/4.7
'''


class Tree(LoggingMixIn, Operations):
    def __init__(self, path, branch):
        self.repo = pygit2.Repository(path)
        self.branch = branch

        self.tree = self.repo.revparse_single(self.branch).tree
        self.files = self.build_tree(self.tree)

        self.now = time()
        self.uid = os.geteuid()
        self.gid = os.getegid()

    def build_tree(self, obj):
        if obj.type_str == 'blob':
            return self.repo[obj.id].read_raw()
        return {o.name: self.build_tree(o) for o in obj}

    def readdir(self, path, fh):
        return ['.', '..'] + [e for e in self.lookup(path)]

    def getattr(self, path, fh=None):
        entry = self.lookup(path)
        attrs = {}
        if isinstance(entry, bytes):
            attrs['st_mode'] = stat.S_IFREG | 0o0444
            attrs['st_nlink'] = 1
            attrs['st_size'] = len(entry)
        else:
            attrs['st_mode'] = stat.S_IFDIR | 0o0555
            attrs['st_nlink'] = len(entry)+2
            attrs['st_size'] = 4096

        attrs['st_uid'] = self.uid
        attrs['st_gid'] = self.gid
        attrs['st_ctime'] = self.now
        attrs['st_atime'] = self.now
        attrs['st_mtime'] = self.now

        return attrs

    def read(self, path, size, offset, fh):
        data = self.lookup(path)
        return data[offset:offset + size]

    def lookup(self, path):
        '''Lookup path as string
        Returns entry from self.files
        '''
        files = self.files
        if path == '/':
            return self.files
        for entry in path.strip('/').split('/'):
            try:
                files = files[entry]
            except KeyError:
                raise FuseOSError(ENOENT)
        if isinstance(files, str):
            return entry
        return files


def mount(repo="", branch="", mountpoint=""):
    Path(mountpoint).mkdir(parents=True, exist_ok=True)

    tree = Tree(repo, branch)
    FUSE(tree, mountpoint, foreground=True, nothreads=True, debug=True)


if __name__ == '__main__':
    config = yaml.safe_load(CONFIG)
    with concurrent.futures.ThreadPoolExecutor() as executor:
        for cfg in config['mounts']:
            executor.submit(mount, **cfg)
