#!/usr/bin/env python

from errno import ENOENT
from os import getegid, geteuid
import stat
from time import time

from fuse import FUSE, FuseOSError, Operations, LoggingMixIn
import pygit2


class Tree(LoggingMixIn, Operations):
    def __init__(self, path, branch):
        self.repo = pygit2.Repository(path)
        self.branch = branch

        self.tree = self.repo.revparse_single(self.branch).tree
        self.files = self.build_tree(self.tree)

        self.now = time()
        self.uid = geteuid()
        self.gid = getegid()

    def build_tree(self, obj):
        if obj.type_str == 'blob':
            return obj.id
        return {o.name: self.build_tree(o) for o in obj}

    def readdir(self, path, fh):
        return ['.', '..'] + [e for e in self.lookup(path)]

    def getattr(self, path, fh=None):
        entry = self.lookup(path)
        attrs = {}
        if isinstance(entry, pygit2.Oid):
            attrs['st_mode'] = stat.S_IFREG | 0o0444
            attrs['st_nlink'] = 1
            attrs['st_size'] = len(self.get_data(path))
        else:
            attrs['st_mode'] = stat.S_IFDIR | 0o0555
            attrs['st_nlink'] = len(entry)+2
            attrs['st_size'] = 4096

        attrs['st_uid'] = self.uid
        attrs['st_gid'] = self.gid
        attrs['st_ctime'] = self.now
        attrs['st_atime'] = self.now
        attrs['st_mtime'] = self.now

        return attrs

    def read(self, path, size, offset, fh):
        data = self.get_data(path)
        return data[offset:offset + size]

    def get_data(self, path):
        oid = self.lookup(path)
        return self.repo[oid].read_raw()

    def lookup(self, path):
        '''Lookup path as string
        Returns entry from self.files
        '''
        files = self.files
        if path == '/':
            return self.files
        for entry in path.strip('/').split('/'):
            try:
                files = files[entry]
            except KeyError:
                raise FuseOSError(ENOENT)
        if isinstance(files, str):
            return entry
        return files


if __name__ == '__main__':
    t = Tree('/home/jdelft/src/github.com/openshift/ocp-build-data', 'origin/openshift-3.10')
    FUSE(t, 'mount', foreground=True, nothreads=True, debug=True)
